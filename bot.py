import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart
from aiogram.enums import ParseMode
import openai

# ==== –ö–û–ù–§–ò–ì ====
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
PAID_USERS = os.getenv("PAID_USERS", "").split(",")

# ==== –ù–ê–°–¢–†–û–ô–ö–ê ====
logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
openai.api_key = OPENAI_API_KEY

# ==== –ö–ù–û–ü–ö–ò ====
def get_main_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç", callback_data="send_test")],
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", url="https://send.monobank.ua/jar/KXTxqn73Y")]
    ])

# ==== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ====
@dp.message(CommandStart())
async def cmd_start(message: Message):
    user_id = str(message.from_user.id)
    if user_id in PAID_USERS:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ—Å—Ç —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ —Ñ–∞–π–ª–æ–º, –∏ —è –ø–æ–º–æ–≥—É —Å –æ—Ç–≤–µ—Ç–∞–º–∏ ‚úçÔ∏è")
    else:
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —Ä–µ—à–∞—Ç—å —Ç–µ—Å—Ç—ã.\n\n"
            "üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å ‚Äî 250 –≥—Ä–Ω –Ω–∞–≤—Å–µ–≥–¥–∞. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Ç–µ–±–µ –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø.\n\n"
            "üëá –ö–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ", reply_markup=get_main_kb()
        )

@dp.message()
async def handle_message(message: Message):
    user_id = str(message.from_user.id)
    if user_id not in PAID_USERS:
        await message.answer("üö´ –°–Ω–∞—á–∞–ª–∞ –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        return

    text = message.text
    if not text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ç–µ—Å—Ç —Ç–µ–∫—Å—Ç–æ–º.")
        return

    await message.answer("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–µ—Å—Ç, –ø–æ–¥–æ–∂–¥–∏ —Å–µ–∫—É–Ω–¥—É...")

    prompt = f"–û—Ç–≤–µ—Ç—å –Ω–∞ —Ç–µ—Å—Ç, –æ–±—ä—è—Å–Ω–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ. –í–æ—Ç —Ç–µ—Å—Ç:\n{text}"
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ç–µ—Å—Ç–∞–º. –û—Ç–≤–µ—á–∞–π —Ç–æ—á–Ω–æ –∏ –∫—Ä–∞—Ç–∫–æ."},
                {"role": "user", "content": prompt}
            ]
        )
        reply = response.choices[0].message.content
        await message.answer(reply, parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò: {str(e)}")

# ==== –ó–ê–ü–£–°–ö ====
if __name__ == '__main__':
    import asyncio
    asyncio.run(dp.start_polling(bot))
